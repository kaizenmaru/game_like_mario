enchant();

// グローバル変数
var PLAYER_SIZE = 32;
var ENEMY_SIZE = 32;
var map = null;
var MAP_SIZE = 32;
var TILE_SIZE = 32;
var clearCount = 0;
var playerLife = 3;
var enemies = null;
var GAME_CLEAR = 7;
var GAME_OVER = 1;

window.onload = function() {

	core = new Core(640, 480);
	core.fps = 30;
	core.score = 0;
	core.time = 60;
	// 「z」キーに「a」ボタンを割り当てる
	core.keybind(90, 'a');

	core.preload('charachip010.png', 'box.png', 'door2.png',
				 'chara019b.png', 'm_castle.png',
				 'icon019.png',
				 'icon0.png', 'nyankotitle.jpg', 'startlogo.png',
				 'clear.png');

	core.onload = function() {

		//タイトルシーン
		var titleScene = function(){
			var scene = new Scene();
			var bg = new Sprite(640, 480);
			bg.image = core.assets['nyankotitle.jpg'];
			scene.addChild(bg);
			var startlogo = new Sprite(130, 48);
			startlogo.image = core.assets['startlogo.png'];
			startlogo.x = core.width/2 - 70;
			startlogo.y = core.height/2 + 50;
			startlogo.ontouchend = function(){
				core.replaceScene(mainScene());
			};
			scene.addChild(startlogo);
			return scene;
		};

		// メインシーン
		var mainScene = function(){
			var scene = new Scene();
			scene.backgroundColor = "black";
			var tick = 0;
			var count = 0; // プレイヤーが撃った弾の回数

			map = new Map(32, 32);
			map.image = core.assets['m_castle.png'];
			map.loadData(Field[clearCount].bg);
			map.collisionData = Field[clearCount].collisionData;

			stage = new Group();
			stage.addChild(map);

			var player = null;
			var enemy = null;

			scene.addChild(stage);

			var lifelabel = new LifeLabel(core.width/2 + 130, 5, 3);
			scene.addChild(lifelabel);
			timeLabel = new TimeLabel(5, 5);
			scene.addChild(timeLabel);


			//ゲーム開始時の処理
			scene.onenter = function(){
				var enemyCount = 0;
				enemies = [];
				lifelabel.life = playerLife;
				for(var i = 0; i < Field[clearCount].COL; i++){
					for(var j = 0; j < Field[clearCount].ROW; j++){
						if(Field[clearCount].bg[i][j] == -30){
							key = new Item(-30, tilesToPixels(j), tilesToPixels(i), stage);
						}
						else if(Field[clearCount].bg[i][j] == -31){
							door = new Item(-31, tilesToPixels(j), tilesToPixels(i), stage);
						}
						else if(Field[clearCount].bg[i][j] == -50){
							enemy = new Enemy(tilesToPixels(j), tilesToPixels(i), stage);
							enemy.key = enemyCount;
							enemies[enemy.key] = enemy;
							enemyCount ++;
						}
						else if(Field[clearCount].bg[i][j] == -51){
							enemy = new Enemy(tilesToPixels(j), tilesToPixels(i), stage);
							enemy.vx = 0;
							enemy.key = enemyCount;
							enemies[enemy.key] = enemy;
							enemyCount ++;
						}
					}
				}
				player = new Player(stage);
				var pad = new Pad();
				pad.x = 10;
				pad.y = core.height - 100;
				scene.addChild(pad);
			};

			// 更新
			scene.onenterframe = function (){
				// 画面のスクロール処理
		      	var x = Math.min((core.width  - 16) / 2 - player.x, 0);
		      	var y = Math.min((core.height - 16) / 2 - player.y, 0);
		      	x = Math.max(core.width,  x + map.width)  - map.width;
		      	y = Math.max(core.height, y + map.height) - map.height;
		      	stage.x = x;
		      	stage.y = y;

		      	if(timeLabel.time >= 120){
		      		playerLife --;
				    core.replaceScene(mainScene());
				     if(playerLife <= 0){
				      	core.pushScene(gameoverScene(GAME_OVER));
				      }
		      	}

		      	if(key.within(player, 12)){
		      		player.hasKey = true;
		      		key.frame = 19;
		      		keyIcon = new Icon(core.width/2, 5, scene);
		      	}
		      	if(door.within(player, 12)){
		      		if(player.hasKey){
		      			door.frame = 12;
		      			clearCount ++;
		      			keyIcon.remove();
		      			if(clearCount > 2){
		      				core.pushScene(gameoverScene(GAME_CLEAR));
		      			}
		      			else{
		      				core.replaceScene(mainScene());
		      			}
		      		}
		      	}
		      	for(i in enemies){
		      		if(enemies[i].within(player, 24)){
		      			if(enemies[i].y - 6 > player.y){
		      				player.vy = -8;
		      				player.jumping = true;
		      				enemies[i].remove();
		      			}
		      			else{
		      				playerLife --;
				      		core.replaceScene(mainScene());
				      		if(playerLife <= 0){
				      			core.pushScene(gameoverScene(GAME_OVER));
				      		}
		      			}
		      		}
		      	}

			};
			return scene;
		};

		// ゲームオーバーシーン
		var gameoverScene = function (num){
			var scene = new Scene();
			if(num == GAME_CLEAR){
				var bg = new Sprite(640, 480);
				bg.image = core.assets['clear.png'];
				bg.frame = 0;
				/*
				bg.tick = 0;
				bg.onenterframe = function(){
					bg.tick ++;
					if(bg.tick % 3 == 0){
						this.frame ++;
					}
					if(this.frame > 9){
						this.frame = 0;
					}
				};
				*/
				bg.ontouchend = function(){
					playerLife = 3;
					clearCount = 0;
					timeLabel.time = 60;
					core.popScene();
					core.replaceScene(titleScene());
				};
				scene.addChild(bg);
			}
			else {
				var bg = new Sprite(640, 480);
				bg.backgroundColor = "black";
				bg.opacity = 0.5;
				scene.addChild(bg);

				var gameoverLabel = new MultiLabel('center', core.height / 2 - 50,
					 "GAME OVER", "red", scene);
				gameoverLabel.x = core.width/2 - 130;
				gameoverLabel.font = "45px sans-serif";
				var restart = new MultiLabel('center', core.height / 2 + 50,
					 "もう一回プレイ", "white", scene);
				restart.x = core.width/2 - 130;
				restart.font = "24px sans-serif";
				restart.ontouchend = function (){
					playerLife = 3;
					clearCount = 0;
					timeLabel.time = 60;
					core.popScene();
					core.replaceScene(titleScene());
				};
			}
			return scene;
		};
		//core.replaceScene(mainScene());
		core.replaceScene(titleScene());
		//core.replaceScene(gameoverScene());
	};
	core.start();
};

// プレイヤークラス
var Player = Class.create(Sprite, {
	initialize: function(stage) {
		Sprite.call(this, PLAYER_SIZE, PLAYER_SIZE);
		this.image = core.assets['charachip010.png'];
		this.frame = 0;
		this.x = map.width - 100;
		this.y = map.height - 100;
		this.vx = 0;
		this.vy = 0;
		this.SPEED = 6;
		this.JUMP_SPEED = 16;
		this.GRAVITY = 0.85;
		this.isMoving = false;
		this.isAtk = false;
		this.count = 0;
		this.tick = 0;
		this.hasKey = false;
		this.jumping = true;
		this.oneTime = false;
		var mx = 1;
		var my = 1;
		var mw = 1;
		var mh = 1;
		stage.addChild(this);

		var Rectangle = Class.create({
	        initialize: function(x, y, width, height) {
	            this.x = x;
	            this.y = y;
	            this.width = width;
	            this.height = height;
	        },
	        right: {
	            get: function() {
	                return this.x + this.width;
	            }
	        },
	        bottom: {
	            get: function() {
	                return this.y + this.height;
	            }
	        }
    	});

    	this.onenterframe = function(){
    		//console.log(this.vy);
    		this.tick ++;

    		if(core.input.up) {
    			if(!this.jumping){
    				if(!this.oneTime){
    				this.vy = -this.JUMP_SPEED;
              		this.jumping = true;
    				}
    			}
              	this.oneTime = true;
            }
            else{
            	this.oneTime = false;
            }
            this.vy += this.GRAVITY;

            // 落ちる速度に制限をかける。これ以上上げるとブロックを通過してしてしまう
            if(this.vy >= 17){
            	this.vy = 17;
            }
            if(core.input.right){
            	this.vx = this.SPEED;
            	this.frame = this.tick % 3 + 6;
            }
            else if(core.input.left){
            	this.vx = -this.SPEED;
            	this.frame = this.tick % 3 + 3;
            }
			else{
				this.vx = 0;
			}

			var dest = new Rectangle(
                this.x + this.vx + mx, this.y + this.vy + my,
                this.width-mw, this.height-mh
            );
            //this.jumping = true;

            // 壁との衝突判定
            /*if(this.y + this.height >= map.height - 16){
            	//console.log("in");
            	this.jumping = false;
            	this.vy = 0;
            	//this.y = map.height - (this.height + 16 + 0.01);
            	//this.y = 30;
            }*/
            while (true) {
                var boundary, crossing;
                var dx = dest.x - this.x - mx; // this.vxを表している
                var dy = dest.y - this.y - my; // this.vyを表している
                if (dx > 0 && Math.floor(dest.right / MAP_SIZE) != Math.floor((dest.right - dx) / MAP_SIZE)) {
                    boundary = Math.floor(dest.right / MAP_SIZE) * MAP_SIZE;
                    crossing = (dest.right - boundary) / dx * dy + dest.y;
                    if ((map.hitTest(boundary, crossing) && !map.hitTest(boundary-MAP_SIZE, crossing)) ||
                        (map.hitTest(boundary, crossing + dest.height) && !map.hitTest(boundary-MAP_SIZE, crossing + dest.height))) {
                        this.vx = 0;
                        dest.x = boundary - dest.width - 0.01;
                        continue;
                    }
                } else if (dx < 0 && Math.floor(dest.x / MAP_SIZE) != Math.floor((dest.x - dx) / MAP_SIZE)) {
                    boundary = Math.floor(dest.x / MAP_SIZE) * MAP_SIZE + MAP_SIZE;
                    crossing = (boundary - dest.x) / dx * dy + dest.y;
                    if ((map.hitTest(boundary-MAP_SIZE, crossing) && !map.hitTest(boundary, crossing)) ||
                        (map.hitTest(boundary-MAP_SIZE, crossing + dest.height) && !map.hitTest(boundary, crossing + dest.height))) {
                        this.vx = 0;
                        dest.x = boundary + 0.01;
                        continue;
                    }
                }
                if (dy > 0 && Math.floor(dest.bottom / MAP_SIZE) != Math.floor((dest.bottom - dy) / MAP_SIZE)) {
                    boundary = Math.floor(dest.bottom / MAP_SIZE) * MAP_SIZE;
                    crossing = (dest.bottom - boundary) / dy * dx + dest.x;
                    if ((map.hitTest(crossing, boundary) && !map.hitTest(crossing, boundary-MAP_SIZE)) ||
                        (map.hitTest(crossing + dest.width, boundary) && !map.hitTest(crossing + dest.width, boundary-MAP_SIZE))) {
                        this.jumping = false;
                        this.vy = 0;
                        dest.y = boundary - dest.height - 0.01;
                        continue;
                    }
                } else if (dy < 0 && Math.floor(dest.y / MAP_SIZE) != Math.floor((dest.y - dy) / MAP_SIZE)) {
                    boundary = Math.floor(dest.y / MAP_SIZE) * MAP_SIZE + MAP_SIZE;
                    crossing = (boundary - dest.y) / dy * dx + dest.x;
                    if ((map.hitTest(crossing, boundary-MAP_SIZE) && !map.hitTest(crossing, boundary)) ||
                        (map.hitTest(crossing + dest.width, boundary-MAP_SIZE) && !map.hitTest(crossing + dest.width, boundary))) {
                        this.vy = 0;
                        dest.y = boundary + 0.01;
                        continue;
                    }
                } if((this.y + this.height >= map.height - 16)){
                	this.jumping = false;
                	this.vy = 0;
                    dest.y = map.height - (this.height + 16 + 0.01) + 1;
                    break;
                }

                break;
            }
            this.x = dest.x-mx;
            this.y = dest.y-my;
    	};

	},
	remove: function(){
		delete this;
	}
});

// 敵クラス
var Enemy = Class.create(Sprite, {
	initialize: function(x, y, stage) {
		Sprite.call(this, PLAYER_SIZE, PLAYER_SIZE);
		this.image = core.assets['chara019b.png'];
		this.frame = 0;
		this.x = x;
		this.y = y;
		this.SPEED = 3;
		this.vx = this.SPEED;
		this.vy = 0;
		this.JUMP_SPEED = 15;
		this.GRAVITY = 0.5;
		this.tick = 0;
		this.jumping = true;
		var mx = 1;
		var my = 2;
		var mw = 1;
		var mh = 2;
		stage.addChild(this);

		var Rectangle = Class.create({
	        initialize: function(x, y, width, height) {
	            this.x = x;
	            this.y = y;
	            this.width = width;
	            this.height = height;
	        },
	        right: {
	            get: function() {
	                return this.x + this.width;
	            }
	        },
	        bottom: {
	            get: function() {
	                return this.y + this.height;
	            }
	        }
    	});

    	this.onenterframe = function(){
    		this.tick ++;
    		//console.log(this.x);
    		/*if(this.within(this.player, 8)){
    			console.log('hit');
    			//this.remove();
    		}*/

    		/*if(this.tick % 50 == 0 && !this.jumping) {
              this.vy = -this.JUMP_SPEED;
              this.jumping = true;
            }*/
            //this.vy += this.GRAVITY;
            // 落ちる速度に制限をかける。17.9が限界!!これ以上上げるとブロックを通過してしてしまう
            if(this.vy > 10){
            	this.vy = 10;
            }

			var dest = new Rectangle(
                this.x + this.vx + mx, this.y + this.vy + my,
                this.width-mw, this.height-mh
            );

            // 壁との衝突判定
            while (true) {
                var boundary, crossing;
                var dx = dest.x - this.x - mx; // this.vxを表している
                var dy = dest.y - this.y - my; // this.vyを表している
                if (dx > 0 && Math.floor(dest.right / MAP_SIZE) != Math.floor((dest.right - dx) / MAP_SIZE)) {
                    boundary = Math.floor(dest.right / MAP_SIZE) * MAP_SIZE;
                    crossing = (dest.right - boundary) / dx * dy + dest.y;
                    if ((map.hitTest(boundary, crossing) && !map.hitTest(boundary-MAP_SIZE, crossing)) ||
                        (map.hitTest(boundary, crossing + dest.height) && !map.hitTest(boundary-MAP_SIZE, crossing + dest.height))) {
                        //console.log("右");
                        this.vx = -this.vx;
                        dest.x = boundary - dest.width - 0.01;
                        continue;
                    }
                } else if (dx < 0 && Math.floor(dest.x / MAP_SIZE) != Math.floor((dest.x - dx) / MAP_SIZE)) {
                    boundary = Math.floor(dest.x / MAP_SIZE) * MAP_SIZE + MAP_SIZE;
                    crossing = (boundary - dest.x) / dx * dy + dest.y;
                    if ((map.hitTest(boundary-MAP_SIZE, crossing) && !map.hitTest(boundary, crossing)) ||
                        (map.hitTest(boundary-MAP_SIZE, crossing + dest.height) && !map.hitTest(boundary, crossing + dest.height))) {
                        //console.log("左");
                        this.vx = -this.vx;
                        dest.x = boundary + 0.01;
                        continue;
                    }
                }
                if (dy > 0 && Math.floor(dest.bottom / MAP_SIZE) != Math.floor((dest.bottom - dy) / MAP_SIZE)) {
                    boundary = Math.floor(dest.bottom / MAP_SIZE) * MAP_SIZE;
                    crossing = (dest.bottom - boundary) / dy * dx + dest.x;
                    if ((map.hitTest(crossing, boundary) && !map.hitTest(crossing, boundary-MAP_SIZE)) ||
                        (map.hitTest(crossing + dest.width, boundary) && !map.hitTest(crossing + dest.width, boundary-MAP_SIZE))) {
                        //console.log("下");
                        this.jumping = false;
                        this.vy = 0;
                        dest.y = boundary - dest.height - 0.01;
                        continue;
                    }
                } else if (dy < 0 && Math.floor(dest.y / MAP_SIZE) != Math.floor((dest.y - dy) / MAP_SIZE)) {
                    boundary = Math.floor(dest.y / MAP_SIZE) * MAP_SIZE + MAP_SIZE;
                    crossing = (boundary - dest.y) / dy * dx + dest.x;
                    if ((map.hitTest(crossing, boundary-MAP_SIZE) && !map.hitTest(crossing, boundary)) ||
                        (map.hitTest(crossing + dest.width, boundary-MAP_SIZE) && !map.hitTest(crossing + dest.width, boundary))) {
                        //console.log("上");
                        this.vy = 0;
                        dest.y = boundary + 0.01;
                        continue;
                    }
                }

                break;
            }
            this.x = dest.x-mx;
            this.y = dest.y-my;
    	};
	},
	remove: function(){
		stage.removeChild(this);
		delete enemies[this.key];
		delete this;
	}
});

var Item = Class.create(Sprite, {
	initialize: function(num, x, y, stage){
		Sprite.call(this, 32, 32);
		if(num == -30){
			this.image = core.assets['box.png'];
			this.frame = 1;
		}
		else if(num == -31){
			this.image = core.assets['door2.png'];
			this.frame = 2;
		}
		this.x = x;
		this.y = y;

		stage.addChild(this);
	},
	remove: function(){
		stage.removeChild(this);
		delete this;
	}
});

var Icon = Class.create(Sprite, {
	initialize: function(x, y, stage){
		Sprite.call(this, 24, 24);
		this.image = core.assets['icon019.png'];
		this.x = x;
		this.y = y;

		stage.addChild(this);
	},
	remove: function(){
		stage.removeChild(this);
		delete this;
	}
});

var monstorTable = {
    0: {image: 'golem.png', hp:30, number:0},
    1: {image: 'akuma.png', hp:40, number:1},
    2: {image: 'shachihoko_r.png', hp:25, number:2},
    3: {image: 'shachihoko_l.png', hp:25, number:3},
};

var MultiLabel = Class.create(Label, {
	initialize: function(align, y, text, color, scene) {
		Label.call(this);
		this.y = y;
		this.text = text;
		this.color = color;
		this.textAlign = align;
		scene.addChild(this);
	}
});

var rnd = function(num){
	return Math.floor(Math.random() * num + 1);
};

var rndSpan = function(num, num2, num3){
	while(true){
		var n = Math.floor(Math.random() * num2 + 1);
		if(n == num3) continue;
		if(n >= num){
			return n;
		}
	}
};

var pixelsToTiles = function(pixels) {
        return Math.floor(pixels / TILE_SIZE);
};

var tilesToPixels = function(tiles) {
        return tiles * TILE_SIZE;
};

var Button = Class.create(Sprite, {
  initialize: function(x, y, mode, scene) {
    Sprite.call(this, 50, 50);
    this.image = core.assets['button.png'];
    this.x = x; // x座標
    this.y = y; // y座標
    this.buttonMode = mode; // ボタンモード
    scene.addChild(this);
  }
});


var Field = {
	0: {
		ROW: 30,
		COL: 30,
		bg: [
	    [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,2,-30,-50,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,2,2,2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,2,-2,-50,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,2,2,2,2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-50,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,2,2,2,-2,-2,-2,-2,2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,2,2,2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,2,2,2,2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,2,-2,-2,-50,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,2,2,2,2,2,2,2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-50,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-31,-2,2],
	    [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
		],
		collisionData: [
	    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
		]
	},

	1: {
		ROW: 20,
		COL: 100,
		bg: [
	    [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,2,-30,-50,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,2,2,2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,2,-50,-2,-2,-2,2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,2,2,2,2,2,2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,2,2,2,-2,-2,2],
	    [2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,2],
	    [2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-50,-2,-2,-2,2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,2,2,2,2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,2,-50,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,2,2,2,2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,2],
	    [2,-2,2,-50,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,2,2,2,2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,2,2,2,2],
	    [2,-2,2,2,2,2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-31,-2,2],
	    [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
		],
		collisionData: [
	    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1],
	    [1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1],
	    [1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1],
	    [1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
	    [1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
	    [1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
	    [1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
		]
	},

	2: {
		ROW: 50,
		COL: 50,
		bg: [
		[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-30,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-31,-2,2],
	    [2,-2,-2,-2,-2,-50,-2,-2,-2,-50,-2,-2,-2,-50,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,2],
	    [2,-2,-2,-2,-2,2,-2,-2,-2,2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-50,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,-50,-2,2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,2,2,2,2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,-2,-2,-50,-2,-2,-2,-2,-2,-2,-2,-2,-2,-50,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-50,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,2],
	    [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
		],
		collisionData: [
	    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1],
	    [1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
	    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
		]
	}
};
